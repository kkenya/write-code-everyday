AWSTemplateFormatVersion: '2010-09-09'

Description: create lambda and trigger

Parameters:
  Env:
    Type: String
    Default: prd
    AllowedValues:
      - prd
      - stg
      - dev
  ServiceName:
    Type: String
    AllowedPattern: ^[a-z0-9-]+$
  LayerArn:
    Type: String
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: System configuration
        Parameters:
          - Env
          - ServiceName
          - LayerArn

Mappings:
  Constants:
    Handler:
      Name: index.handler
    S3:
      BucketName: write-code-everyday-source
      KeyName: lambda.zip

Resources:
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: '../dist'
      Description: lambda function treggerd by cloud watch events
      Environment:
        Variables:
          env: !Ref Env
      FunctionName: !Sub '${Env}-${ServiceName}-lambda'
      Handler: !FindInMap [Constants, Handler, Name]
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${ServiceName}-lambda'
      Layers:
        - !Sub '${LayerArn}'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Description: role execute lambda and write logs
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: '/'
      Policies:
        - PolicyName: !Sub '${Env}-${ServiceName}-get-ssm-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:Describe*
                  - cloudwatch:Get*
                  - cloudwatch:List*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Env}/${ServiceName}/*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/6ab7520c-e7ac-46f3-8bda-90b27df762cf'
      RoleName: !Sub '${Env}-${ServiceName}-lambda-role'

  CrontEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: event bridge notify everyday
      Name: !Sub '${Env}-${ServiceName}-event-rule'
      # RoleArn: String
      # minute, hour, date, month, day, year
      # ScheduleExpression: 'cron(0 10,15,20,23 * * ? *)'
      ScheduleExpression: 'rate(5 minutes)'
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: !Sub '${Env}-${ServiceName}-lambda'

  EventRlePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Lambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CrontEventRule.Arn
